# Basic implementation of a flexible MultiColumn element, not exposed directly but inherited by all specific MultiColumn content elements
prototype(signalwerk.sfgz:ContactView) < prototype(Neos.Neos:Content) {
	@cache {
			mode = 'uncached'
			context {
					1 = 'node'
					2 = 'documentNode'
					3 = 'site'
			}
	}

	organisations = ${q(site).find('[instanceof signalwerk.sfgz:ContactCategory][type="Organisation"]')}
	functions = ${q(site).find('[instanceof signalwerk.sfgz:ContactCategory][type="Funktion"]')}

  isAjax = ${!String.isBlank(request.arguments.cat)}

  parentID = ${q(node).parents().parents().get(0)}

	contacts = Neos.Fusion:Collection {

		#collection = ${q(site).find('[instanceof signalwerk.sfgz:NewsItem]')}

		collection = Neos.Fusion:Case {

				ifTwoCat {
						condition = ${!String.isBlank(String.split(request.arguments.cat, ',')[0]) && String.split(request.arguments.cat, ',')[1]}
						renderer = ${q(site).find('[instanceof signalwerk.sfgz:ContactItem]').filterPropertiesFromArray('[identifier="' + String.split(request.arguments.cat, ',')[0] +'"]','categories').filterPropertiesFromArray('[identifier="' + String.split(request.arguments.cat, ',')[1] +'"]','categories')}
		    }
				ifCat {
						condition = ${!String.isBlank(request.arguments.cat)}
						renderer = ${q(site).find('[instanceof signalwerk.sfgz:ContactItem]').filterPropertiesFromArray('[identifier="' + request.arguments.cat +'"]','categories')}
		    }
		    else {
		        condition = TRUE
		        renderer = ${q(site).find('[instanceof signalwerk.sfgz:ContactItem]')}
		    }
		}

		itemRenderer = signalwerk.sfgz:ContactItem
		itemName = 'node'
		iterationName = 'nodeIteration'
	}
}
