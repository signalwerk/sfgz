prototype(signalwerk.sfgz:CourseView) < prototype(Neos.Neos:Content) {
    test = 'thisisatest'
    requestFormat = ${request.format}
    courseID = ${request.arguments.kurs}

    currentCourse = ${q(site).find('[instanceof signalwerk.sfgz:Course][coursid = "' + request.arguments.kurs +'"]').get(0)}
    currentExecution = ${q(site).find('[instanceof signalwerk.sfgz:CourseExecution][code = "' + request.arguments.durchfuehrung +'"]').get(0)}

    categories = ${q(site).find('[instanceof signalwerk.sfgz:CourseCategory]')}

    course = Neos.Fusion:Collection {
      collection = ${q(site).find('[instanceof signalwerk.sfgz:Course][coursid = "' + request.arguments.kurs +'"]')}
      itemName = 'course'
      itemRenderer = Neos.Fusion:Template {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/NodeTypes/Course.html'
        node = ${course}
        executions = Neos.Fusion:Collection {
          collection = ${q(course).find('[instanceof signalwerk.sfgz:CourseExecution]')}
          itemName = 'courseExecution'

          itemRenderer = Neos.Fusion:Template {
            templatePath = 'resource://signalwerk.sfgz/Private/Templates/NodeTypes/CourseExecution.html'
            node = ${courseExecution}
            course = ${course}
            lektionenProVeranstaltung = ${courseExecution.properties.lektionen / courseExecution.properties.veranstaltungen}
          }
        }
      }
    }

    courseItemRenderer = Neos.Fusion:Collection {

      collection = Neos.Fusion:Case {
      if {
              condition = ${String.length(request.arguments.cat) > 0 ? true : false}
              renderer = ${q(site).find('[instanceof signalwerk.sfgz:Course]').filterPropertiesFromArray('[identifier="' + request.arguments.cat +'"]','categories')}
          }
          else {
              condition = TRUE
              renderer = ${q(site).find('[instanceof signalwerk.sfgz:Course]')}
          }
      }

      itemName = 'course'
      itemRenderer = Neos.Fusion:Template {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/NodeTypes/CourseViewListItem.html'
        course = ${course}
        executions = Neos.Fusion:Collection {
          collection = ${q(course).find('[instanceof signalwerk.sfgz:CourseExecution]')}
          itemName = 'courseExecution'

          itemRenderer = Neos.Fusion:Template {
            templatePath = 'resource://signalwerk.sfgz/Private/Templates/NodeTypes/CourseExecutionViewListItem.html'
            courseExecution = ${courseExecution}
          }
        }
        # executions = Neos.Neos:ContentCollection {
        #   nodePath = 'executions'
        # }
      }
    }


    @cache {
        mode = 'uncached'
        context {
            1 = 'node'
            2 = 'documentNode'
            3 = 'site'
        }
    }

#    @cache {
#        mode = 'cached'
#
#        entryTags {
#                # Flushes cache entries if any node of type course changes.
#                1 = ${'NodeType_signalwerk.sfgz:Course'}
#        }
#    }

}

# Abstract render definition for a single content column in a multi column element
prototype(signalwerk.sfgz:CourseViewListItem) < prototype(Neos.Neos:ContentCollection) {


}
