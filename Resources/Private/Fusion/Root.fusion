/**
 * Root TypoScript template for the sfgz.ch site
 */

include: NodeTypes/*



page = Page {

  head {

    signalwerk = Neos.Fusion:Template {
			templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
			sectionName = 'signalwerk'
		}

    /**
		favicon = Neos.Fusion:Template {
      templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
			sectionName = 'favicon'
		}
    */

    stylesheets.site = Neos.Fusion:Template {
      templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
      sectionName = 'stylesheets'
    }

    javascripts.site = Neos.Fusion:Template {
      templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
      sectionName = 'headScripts'
    }

    meta = Neos.Fusion:Template {
      templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
      sectionName = 'meta'
    }
  }

  bodyTag.attributes.class = ${q(node).property('style')}

  body {
    templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
    sectionName = 'body'

    parts {
      // menu = TYPO3.Neos:Menu
      // menu.maximumLevels = 2
      // menu {
      //   maximumLevels = 2
      //   entryLevel = 1
      // }
      menu1 = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'

        entryLevel = 2
        maximumLevels = 1
        startingPoint = ${q(site).children('[uriPathSegment="angebot"]').get(0)}
      }

      menu2 = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'

        entryLevel = 3
        maximumLevels = 1
      }

      menu3 = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'

        entryLevel = 4
        maximumLevels = 1
        attributes.class = 'menu menu3'
      }

      menuSiblings = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'
        entryLevel = ${q(node).property('_depth') - 2}
        maximumLevels = 1
      }

      currentLevel = ${q(node).property('_depth') - 2}

      mobileMenu1 = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'

        entryLevel = 2
        maximumLevels = 1
        startingPoint = ${q(site).children('[uriPathSegment="angebot"]').get(0)}
      }

      mobileMenu2 = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'

        entryLevel = 3
        maximumLevels = 2
      }

      metaMenu = Menu {
        templatePath = 'resource://signalwerk.sfgz/Private/Templates/FusionObjects/DefaultMenu.html'

        entryLevel = 2
        maximumLevels = 1
        startingPoint = ${q(site).children('[uriPathSegment="schule"]').get(0)}
      }

    }

    hasExtras = ${q(node).children('extra').children().count() > 0}

    workspaceName = ${node.context.workspace.name}
    contextName = ${Configuration.setting('Neos.Flow.core.context')}

    // These are your content areas, you can define as many as you want, just name them and the nodePath.
    content {
      // The default content section
      main = PrimaryContent {
        nodePath = 'main'
      }

			extra = ContentCollection {
				nodePath = 'extra'
			}
    }



    javascripts.site = Neos.Fusion:Template {
      templatePath = 'resource://signalwerk.sfgz/Private/Templates/Page/Default.html'
      sectionName = 'bodyScripts'
    }


    javascripts.mainProduction = Neos.Fusion:Tag {
  		tagName = 'script'
  		attributes {
  			src = Neos.Fusion:ResourceUri {
  				package = 'signalwerk.sfgz'
          path = 'JavaScript/signalwerk.min.js'
  			}
  			async = null
  		}
  		@if.inProductionContext = ${Configuration.setting('Neos.Flow.core.context') == 'Production'}
  	}

    javascripts.mainDevelopment = Neos.Fusion:Tag {
  		tagName = 'script'
  		attributes {
  			src = Neos.Fusion:ResourceUri {
  				package = 'signalwerk.sfgz'
          path = 'JavaScript/signalwerk.js'
  			}
  			async = null
  		}
  		@if.inProductionContext = ${Configuration.setting('Neos.Flow.core.context') != 'Production'}
  	}

    javascripts.backend = Neos.Fusion:Tag {
  		tagName = 'script'
  		attributes {
  			src = Neos.Fusion:ResourceUri {
  				package = 'signalwerk.sfgz'
  				path = 'JavaScript/signalwerkBackend.js'
  			}
  			async = null
  		}
  		@if.onlyRenderWhenNotInLiveWorkspace = ${node.context.workspace.name != 'live'}
  	}

    javascripts.frontend = Neos.Fusion:Tag {
  		tagName = 'script'
  		attributes {
  			src = Neos.Fusion:ResourceUri {
  				package = 'signalwerk.sfgz'
  				path = 'JavaScript/signalwerkFrontend.js'
  			}
  			async = null
  		}
  		@if.onlyRenderWhenNotInLiveWorkspace = ${node.context.workspace.name == 'live'}
  	}


  }
}

default < page

// Special page layout with less navigation components
wide < page
wide {
	bodyTag.attributes.class = 'wide'
}



// https://discuss.neos.io/t/how-can-i-pass-an-variable-via-url-parameters/994/6

course < page
course {
  bodyTag.attributes.class = 'course'
  @cache.entryIdentifier.courseId = ${request.arguments.kurs}
  @cache.entryIdentifier.executionId = ${request.arguments.durchfuehrung}
  @cache.entryIdentifier.categoryId = ${request.arguments.cat}
}



#
# Add the paginator's "current page" value to cache entry identifiers in cache layers above the blog posts index.
# Depending on your actual page structure you will have to add this identifier part to further TypoScript object
# cache configurations.
#
root.@cache.entryIdentifier.courseId = ${request.arguments.kurs}
root.@cache.entryIdentifier.executionId = ${request.arguments.durchfuehrung}
root.@cache.entryIdentifier.categoryId = ${request.arguments.cat}

// prototype(Neos.Neos:Page) {
// 	@cache.entryIdentifier.courseId = ${request.arguments.kurs}
// }

prototype(Neos.Neos:PrimaryContent).default {
  renderer.@cache.entryIdentifier.courseId = ${request.arguments.kurs}
  renderer.@cache.entryIdentifier.executionId = ${request.arguments.durchfuehrung}
  renderer.@cache.entryIdentifier.categoryId = ${request.arguments.cat}
}
