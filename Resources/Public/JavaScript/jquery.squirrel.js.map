{"version":3,"sources":["jquery.squirrel.js"],"names":["jQuerySquirrelNamespace","window","$","fn","extend","squirrel","action","options","clearOnSubmit","clear_on_submit","storageMethod","storage_method","storageKey","storage_key","storageKeyPrefix","storage_key_prefix","storage","isString","toUpperCase","localStorage","sessionStorage","isObject","_reAction","test","eventFields","eventReset","findFields","sanitizeOption","each","eachForm","$form","dataAttribute","attr","unstash","find","off","_eventsChange","_eventsClick","_eventsSubmit","filter","eachNode","$element","name","isUndefined","value","tagName","type","checkedValue","stash","checked","trigger","val","is","isArray","eachValue","index","option","eachOption","$option","html","prop","on","onEvent","stashName","onClick","isBoolean","key","store","JSON","parse","getItem","append","setItem","stringify","removeItem","trim","length","undefined","defaultKey","squirrelReady","jQuery"],"mappings":"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","file":"jquery.squirrel.js","sourcesContent":["/*\n * squirrel.js\n * http://github.com/jpederson/Squirrel.js\n * Author: James Pederson (jpederson.com)\n * Licensed under the MIT, GPL licenses.\n * Version: 0.1.8\n */\n; // jshint ignore:line\n(function jQuerySquirrelNamespace(window, $) {\n\n    // PLUGIN LOGIC\n\n    $.fn.extend({\n\n        // naming our jQuery plugin function.\n        squirrel: function squirrel(action, options) {\n\n            // set our options from the defaults, overriding with the\n            // parameter we pass into this function.\n            options = $.extend({}, $.fn.squirrel.options, options);\n\n            /* jscs: disable */\n\n            // jscs only workaround\n            options.clearOnSubmit = options.clear_on_submit;\n            options.storageMethod = options.storage_method;\n            options.storageKey = options.storage_key;\n            options.storageKeyPrefix = options.storage_key_prefix;\n            /* jscs: enable */\n\n            // initialize as null by default.\n            var storage = null;\n\n            // either 'local' or 'session' has been passed if this is true.\n            if (isString(options.storageMethod)) {\n\n                storage = options.storageMethod.toUpperCase() === 'LOCAL' ? window.localStorage : window.sessionStorage;\n\n                // an object that could be a valid storage object has been passed.\n\n            } else if (options.storageMethod !== null && isObject(options.storageMethod)) {\n\n                storage = options.storageMethod;\n\n            }\n\n            // if null or the storage object doesn't contain the valid functions required, then return this.\n            if (storage === null || !(isObject(storage) && 'getItem' in storage && 'removeItem' in storage && 'setItem' in storage)) {\n\n                // to maintain chaining in jQuery.\n                return this;\n\n            }\n\n            // check the action is valid and convert to uppercase.\n            action = isString(action) && _reAction.test(action) ? action.toUpperCase() : 'START';\n\n            // strings related to the find functions and event handling.\n            var eventFields = 'input[type!=file]:not(.squirrel-ignore), select:not(.squirrel-ignore), textarea:not(.squirrel-ignore)';\n            var eventReset = 'button[type=reset], input[type=reset]';\n            var findFields = 'input[id], input[name], select[id], select[name], textarea[id], textarea[name]';\n\n            // sanitize the options strings.\n            options.storageKey = sanitizeOption(options.storageKey, 'squirrel');\n            options.storageKeyPrefix = sanitizeOption(options.storageKeyPrefix, '');\n\n            // iterate through all the matching elements and return\n            // the jQuery object to preserve chaining in jQuery.\n            return this.each(function eachForm() {\n\n                // store a jQuery object for the form so we can use it\n                // inside the other bindings.\n                var $form = $(this);\n\n                // check for the data-squirrel attribute.\n                var dataAttribute = $form.attr('data-squirrel');\n\n                // append the custom prefix and determine if the data attribute is valid.\n                var storageKey = options.storageKeyPrefix + (isString(dataAttribute) ? dataAttribute : options.storageKey);\n\n                switch (action) {\n                    case 'CLEAR':\n                    case 'REMOVE':\n\n                        // clear the storage if a 'clear' action is passed.\n                        unstash(storage, storageKey);\n                        break;\n\n                    case 'OFF':\n                    case 'STOP':\n\n                        // stop the registered events if a 'stop' action is passed.\n                        $form.find(eventFields).off(_eventsChange);\n                        $form.find(eventReset).off(_eventsClick);\n                        $form.off(_eventsSubmit);\n                        break;\n\n                    default:\n\n                        // LOAD VALUES FOR ALL FORMS FROM LOCAL/SESSION STORAGE IN ORDER OF THE DOM\n                        $form.find('*').filter(findFields).each(function eachNode() {\n\n                            // cache the jQuery object.\n                            var $element = $(this);\n\n                            // get the name attribute.\n                            var name = $element.attr('name');\n\n                            // if the name attribute doesn't exist, determine the id attribute instead.\n                            if (isUndefined(name)) {\n\n                                name = $element.attr('id');\n\n                                // a name attribute is required to store the element data.\n                                if (isUndefined(name)) {\n\n                                    // return $form to maintain chaining in jQuery.\n                                    return $form;\n\n                                }\n\n                            }\n\n                            // declare a variable to hold the value from the storage.\n                            var value = null;\n\n                            // tagName returns an uppercase value in HTML5.\n                            switch (this.tagName) {\n                                case 'INPUT':\n                                case 'TEXTAREA':\n                                    var type = $element.attr('type');\n\n                                    if (type === 'checkbox') {\n\n                                        // checkboxes.\n                                        var checkedValue = $element.attr('value');\n\n                                        if (!isString(checkedValue)) {\n\n                                            checkedValue = '';\n\n                                        }\n\n                                        value = stash(storage, storageKey, name + checkedValue);\n\n                                        if (value !== null && value !== this.checked) {\n\n                                            // set the checkbox state to 'true', if the value is true\n                                            this.checked = (value === true);\n\n                                            // trigger the 'change' event.\n                                            $element.trigger('change');\n\n                                        }\n\n                                    } else if (type === 'radio') {\n\n                                        // radio buttons.\n                                        value = stash(storage, storageKey, name);\n\n                                        if (value !== null && value !== this.checked) {\n\n                                            this.checked = ($element.val() === value);\n\n                                            // trigger the 'change' event.\n                                            $element.trigger('change');\n\n                                        }\n\n                                    } else {\n\n                                        // load the text values from the storage.\n                                        value = stash(storage, storageKey, name);\n\n                                        if (value !== null && !$element.is('[readonly]') && $element.is(':enabled') && $element.val() !== value) {\n\n                                            // set the value and trigger the 'change' event.\n                                            $element.val(value).trigger('change');\n\n                                        }\n\n                                    }\n\n                                    break;\n\n                                case 'SELECT':\n\n                                    // set the select values on load.\n                                    value = stash(storage, storageKey, name);\n\n                                    if (value !== null) {\n\n                                        $.each(($.isArray(value) ? value : [value]), function eachValue(index, option) {\n\n                                            $element.find('option').filter(function eachOption() {\n\n                                                var $option = $(this);\n                                                return ($option.val() === option || $option.html() === option);\n\n                                            })\n\n                                            // set selected to true.\n                                            .prop('selected', true)\n\n                                            // trigger the 'change' event.\n                                            .trigger('change');\n\n                                        });\n\n                                    }\n\n                                    break;\n\n                                default:\n                                    break;\n                            }\n\n                        });\n\n                        // UPDATE VALUES FOR ALL FIELDS ON CHANGE.\n                        // track changes in fields and store values as they're typed.\n                        $form.find(eventFields).on(_eventsChange, function onEvent() {\n\n                            // cache the jQuery object.\n                            var $element = $(this);\n\n                            // get the name attribute.\n                            var name = $element.attr('name');\n\n                            // if the name attribute doesn't exist, determine the id attribute instead.\n                            if (isUndefined(name)) {\n\n                                // get the id attribute.\n                                name = $element.attr('id');\n\n                                // a name attribute is required to store the element data.\n                                if (isUndefined(name)) {\n\n                                    return;\n\n                                }\n\n                            }\n\n                            // get the value attribute.\n                            var value = $element.attr('value');\n\n                            // pre-append the name attribute with the value if a checkbox; otherwise, use the name only.\n                            var stashName = (this.type === 'checkbox' && !isUndefined(value)) ? name + value : name;\n\n                            stash(storage, storageKey, stashName, this.type === 'checkbox' ? $element.prop('checked') : $element.val());\n\n                        });\n\n                        // when the reset button is clicked, clear the storage.\n                        $form.find(eventReset).on(_eventsClick, function onClick() {\n\n                            unstash(storage, storageKey);\n\n                        });\n\n                        // clear the storage on submit.\n                        $form.on(_eventsSubmit, function onClick() {\n\n                            // if not a boolean datatype or is equal to true, then clear the storage.\n                            if (!isBoolean(options.clearOnSubmit) || options.clearOnSubmit) {\n\n                                unstash(storage, storageKey);\n\n                            }\n\n                        });\n\n                        break;\n\n                } // end actions.\n\n            }); // return each plugin call.\n\n        }, // end plugin function.\n\n    }); // end jQuery extend.\n\n    // EVENTS\n    var _eventsClick = 'click.squirrel.js';\n    var _eventsChange = 'blur.squirrel.js keyup.squirrel.js change.squirrel.js';\n    var _eventsSubmit = 'submit.squirrel.js';\n\n    // REGULAR EXPRESSIONS\n    var _reAction = /^(?:CLEAR|REMOVE|OFF|STOP)$/i;\n\n    // METHODS\n\n    // stash or grab a value from our session store object.\n    function stash(storage, storageKey, key, value) {\n\n        // get the squirrel storage object.\n        var store = window.JSON.parse(storage.getItem(storageKey));\n\n        // if it doesn't exist, create an empty object.\n        if (store === null) {\n\n            store = {};\n\n        }\n\n        // if a value isn't specified.\n        if (isUndefined(value) || value === null) {\n\n            // return the store value if the store value exists; otherwise, null.\n            return !isUndefined(store[key]) ? store[key] : null;\n\n        }\n\n        // if a value is specified.\n        // create an append object literal.\n        var append = {};\n\n        // add the new value to the object that we'll append to the store object.\n        append[key] = value;\n\n        // extend the squirrel store object.\n        // in ES6 this can be shortened to just $.extend(store, {[key]: value}), as there would be no need\n        // to create a temporary storage object.\n        $.extend(store, append);\n\n        // re-session the squirrel store again.\n        storage.setItem(storageKey, window.JSON.stringify(store));\n\n        // return the value.\n        return value;\n\n    }\n\n    // clear the sessionStorage key based on the options specified.\n    function unstash(storage, storageKey) {\n\n        // clear value for our storage key.\n        storage.removeItem(storageKey);\n\n    }\n\n    // check if a value is a boolean datatype.\n    function isBoolean(value) {\n\n        return $.type(value) === 'boolean';\n\n    }\n\n    // check if a value is an object.\n    function isObject(value) {\n\n        return $.type(value) === 'object';\n\n    }\n\n    // check if a value is a string datatype and has a length greater than zero (trims whitespace as well).\n    function isString(value) {\n\n        return $.type(value) === 'string' && $.trim(value).length > 0;\n\n    }\n\n    // check if a value is undefined.\n    function isUndefined(value) {\n\n        return value === undefined;\n\n    }\n\n    // sanitize a particular string option.\n    function sanitizeOption(key, defaultKey) {\n\n        // if a string type, then return the key; otherwise the default key.\n        return isString(key) ? key : defaultKey;\n\n    }\n\n    // DEFAULTS\n\n    // default options for squirrel.js.\n    /* jscs: disable */\n    $.fn.squirrel.options = {\n        clear_on_submit: true,\n        storage_method: 'session',\n        storage_key: 'squirrel',\n        storage_key_prefix: '',\n    };\n    /* jscs: enable */\n\n    // onload.\n    $(function squirrelReady() {\n\n        // load all forms that have the squirrel class or data-squirrel attribute associated with them.\n        $('form.squirrel, form[data-squirrel]').squirrel();\n\n    });\n\n})(window, window.jQuery);\n"]}